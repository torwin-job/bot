import os
from dotenv import load_dotenv
from django.core.management.base import BaseCommand
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
from services.service_logic import format_description, get_all_services, get_service_by_id
from applications.service_logic import create_application
import logging

load_dotenv()

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

AWAIT_START, CHOOSING_SERVICE, ENTER_NAME, ENTER_PHONE = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    logger.debug(f"Update: {update}")
    keyboard = [["–£—Å–ª—É–≥–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É\n"
        "–Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
        "–ù–∞–∂–º–∏ ¬´–£—Å–ª—É–≥–∏¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )
    return AWAIT_START

async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
    services = await get_all_services()
    for service in services:
        desc = format_description(service.description)
        text = f"üíº <b>{service.name}</b>\n{desc}"
        await update.message.reply_text(text, parse_mode="HTML")
    keyboard = [
        [InlineKeyboardButton(service.name, callback_data=f"service_{service.id}")]
        for service in services
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return CHOOSING_SERVICE

async def service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service_id = int(query.data.replace("service_", ""))
    service = await get_service_by_id(service_id)
    desc = format_description(service.description)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service.name}")
    await query.edit_message_text(
        f"üíº <b>{service.name}</b>\n{desc}\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>",
        parse_mode="HTML"
    )
    context.user_data['service'] = service.name
    context.user_data['service_obj'] = service
    return ENTER_NAME

async def already_applied(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data and context.user_data.get('application_created'):
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏")
        return ConversationHandler.END
    return

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è: {context.user_data['name']}")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return ENTER_PHONE

async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not phone.isdigit() or len(phone) < 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–º–∏–Ω–∏–º—É–º 5).")
        return ENTER_PHONE
    context.user_data['phone'] = phone
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}")
    try:
        service = context.user_data['service_obj']
        await create_application(
            name=context.user_data['name'],
            phone=context.user_data['phone'],
            service=service
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: –∏–º—è={context.user_data['name']}, —Ç–µ–ª–µ—Ñ–æ–Ω={context.user_data['phone']}, —É—Å–ª—É–≥–∞={service.name}")
        context.user_data['application_created'] = True
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É")
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {TOKEN}")
        if not TOKEN:
            logger.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
            raise RuntimeError('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!')
        application = ApplicationBuilder().token(TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                AWAIT_START: [
                    MessageHandler(filters.Regex(r'(?i)^\s*—É—Å–ª—É–≥–∏\s*$'), show_services),
                    MessageHandler(filters.ALL, already_applied)
                ],
                CHOOSING_SERVICE: [CallbackQueryHandler(service_callback)],
                ENTER_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)
                ],
                ENTER_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)
                ],
            },
            fallbacks=[CommandHandler('start', start), CommandHandler('cancel', cancel)],
            # per_message=True,  # –£–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        )

        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.ALL, already_applied))
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
        application.run_polling()
